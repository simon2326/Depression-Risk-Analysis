# -*- coding: utf-8 -*-
"""Deployment_Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dil20_-D6qwSktaThRTTA0mM-3rD7EU-

# ***Despliegue***
- ***Cargamos el modelo***
- ***Cargamos los datos futuros***
- ***Preparar los datos futuros***
- ***Aplicamos el modelo para la predicción***
"""

#Importamos librerías básicas
import pandas as pd # manipulacion dataframes
import numpy as np  # matrices y vectores
import matplotlib.pyplot as plt #gráfica

# Paso 1: Limpiar atípicos
def remove_outliers(X):
    # Se asigna valor nulo a los atípicos en variables numéricas
    X.loc[(X['Age'] < 18) | (X['Age'] > 60), 'Age'] = np.nan
    X.loc[(X['Work/Study Hours'] < 0) | (X['Work/Study Hours'] > 12), 'Work/Study Hours'] = np.nan

    # Se asigna valor nulo a los valores fuera de categorías esperadas en variables categóricas
    X['Working Professional or Student'] = X['Working Professional or Student'].apply(lambda x: x if x in ['Working Professional', 'Student'] else np.nan)
    X['Dietary Habits'] = X['Dietary Habits'].apply(lambda x: x if x in ['Unhealthy', 'Healthy', 'Moderate'] else np.nan)
    X['Have you ever had suicidal thoughts ?'] = X['Have you ever had suicidal thoughts ?'].apply(lambda x: x if x in ['Yes', 'No'] else np.nan)
    X['Financial Stress'] = X['Financial Stress'].apply(lambda x: x if x in [1, 2, 3, 4, 5] else np.nan)
    X['Job/Study Satisfaction'] = X['Job/Study Satisfaction'].apply(lambda x: x if x in [1.0, 2.0, 3.0, 4.0, 5.0] else np.nan)
    X['Work/Academic Pressure'] = X['Work/Academic Pressure'].apply(lambda x: x if x in [1.0, 2.0, 3.0, 4.0, 5.0] else np.nan)

    # Validar todas las variables
    return X

#Cargamos el modelo
import pickle
filename = '../Modeling-Evaluation/pipeline_Logistic_Regression_model.pkl'
model = pickle.load(open(filename, 'rb'))

#Cargamos los datos futuros
#data = pd.read_csv("../Data/datos_futuros.csv")
#data.head()

# Lista de columnas a convertir

#columns_to_category = ['Name', 'Gender', 'City', 'Working Professional or Student', 'Profession', 'Academic Pressure', 'Work Pressure', 'Study Satisfaction', 'Job Satisfaction', 'Financial Stress', 'Sleep Duration', 'Dietary Habits', 'Degree', 'Have you ever had suicidal thoughts ?', 'Family History of Mental Illness']

# Convertir cada columna en category
#for column in columns_to_category:
#    data[column] = data[column].astype('category')

#common_categories = [1.0, 2.0, 3.0, 4.0, 5.0]

#data['Job Satisfaction'] = data['Job Satisfaction'].cat.set_categories(common_categories)
#data['Study Satisfaction'] = data['Study Satisfaction'].cat.set_categories(common_categories)
#data['Academic Pressure'] = data['Academic Pressure'].cat.set_categories(common_categories)
#data['Work Pressure'] = data['Work Pressure'].cat.set_categories(common_categories)

# Unir columnas para crear nuevas características
#data['Job/Study Satisfaction'] = data['Job Satisfaction'].fillna(data['Study Satisfaction'])
#data['Work/Academic Pressure'] = data['Academic Pressure'].fillna(data['Work Pressure'])

# Eliminar columnas innecesarias
#data = data.drop(columns=['CGPA', 'Name', 'Profession', 'City', 'Family History of Mental Illness', 'Gender', 'Sleep Duration', 'Job Satisfaction', 'Study Satisfaction', 'Academic Pressure', 'Work Pressure'])

#data.info()

#data.head()

#Se crea interfaz gráfica con streamlit para captura de los datos

import streamlit as st

st.title('Depression Risk Prediction')

# Working Professional or Student	Dietary Habits
# Degree	Have you ever had suicidal thoughts ?	Work/Study Hours
# Financial Stress	Job/Study Satisfaction	Work/Academic Pressure

age = st.slider('Age', min_value=18, max_value=60, value=30, step=1)
working_professional = st.selectbox('Working Professional or Student', ['Working Professional', 'Student'])
dietary_habits = st.selectbox('Dietary Habits', ['Healthy', 'Moderate', 'Unhealthy'])
degree = st.selectbox('Degree', ['B.Arch', 'B.Com', 'B.Ed', 'B.Pharm', 'B.Tech', 'BA', 'BBA', 'BCA', 'BE', 'BHM', 'BSc', 'Class 12', 'LLB', 'LLM', 'M.Com', 'M.Ed', 'M.Pharm', 'M.Tech', 'MA', 'MBA', 'MBBS', 'MCA', 'MD', 'ME', 'MHM', 'MSc', 'PhD'])
suicidal_thoughts = st.selectbox('Have you ever had suicidal thoughts ?', ['Yes', 'No'])
work_hours = st.slider('Work/Study Hours', min_value=0, max_value=12, value=5, step=1)
financial_stress = st.selectbox('Financial Stress', [1, 2, 3, 4, 5])
job_study_satisfaction = st.selectbox('Job/Study Satisfaction', ['1.0', '2.0', '3.0', '4.0', '5.0'])
work_academic_pressure = st.selectbox('Work/Academic Pressure', ['1.0', '2.0', '3.0', '4.0', '5.0'])

datos = [[age, working_professional, dietary_habits, degree, suicidal_thoughts, work_hours, financial_stress, job_study_satisfaction, work_academic_pressure]]
data = pd.DataFrame(datos, columns=['Age', 'Working Professional or Student', 'Dietary Habits', 'Degree', 'Have you ever had suicidal thoughts ?', 'Work/Study Hours', 'Financial Stress', 'Job/Study Satisfaction', 'Work/Academic Pressure'])

"""# ***Predicciones***"""

#Hacemos la predicción con el Tree
Y_fut = model.predict(data)
Y_fut

#print(labelencoder.inverse_transform(Y_fut))

data['Depression Risk'] = Y_fut

data